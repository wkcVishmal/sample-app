AWSTemplateFormatVersion: 2010-09-09

Parameters:
  MasterUsername:
    Type: String
    Description: The username for our database.
    Default: postgres
  MasterUserPassword:
    Type: String
    Description: The password for the database.
    Default: pgpassword
    "NoEcho": true
  JenkinsAdminPassword:
    Type: String
    Description: The password for jenkins.
    Default: p@ssw0rd
    "NoEcho": true

Resources:
  # VPC, Subnets, NAT gateway, Internet gateway, Route tables
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DependsOn: VPC
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]       
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-A
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.20.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-B
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.30.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-C
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.50.0/24
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-A
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.60.0/24
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-B
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.70.0/24
      AvailabilityZone: !Select [ 2, !GetAZs ]
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-C
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public
  PublicRoute1:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway
  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable
  NATGateway:
    Type: AWS::EC2::NatGateway
    DependsOn:
      - PublicSubnetARouteTableAssociation
      - PublicSubnetBRouteTableAssociation
      - PublicSubnetCRouteTableAssociation
    Properties: 
      AllocationId: !GetAtt ElasticIPAddress.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags: 
      - Key: Name
        Value: !Sub NAT-${AWS::StackName}
  ElasticIPAddress:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
  # ECS cluster, ECS Services, ECR and task definitions
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: "app"
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [!Ref "AWS::StackName", "-log-group" ]]
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['', [!Ref "AWS::StackName", "-role" ]]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  ECRRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "app"
  JenkinsRepository: 
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: "jenkins"
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: "app"
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !Ref ExecutionRole
      Cpu: 256
      Memory: 512
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: app
          Image: !Join ['', [!GetAtt ECRRepository.RepositoryUri, ":latest" ]]
          MemoryReservation: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 8000
              Protocol: tcp
  JenkinsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Join ['', [!Ref "AWS::StackName", "-jenkins" ]]
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !Ref ExecutionRole
      Cpu: 256
      Memory: 512
      NetworkMode: "awsvpc"
      ContainerDefinitions:
        - Name: app
          Image: !Join ['', [!GetAtt JenkinsRepository.RepositoryUri, ":latest" ]]
          MemoryReservation: 256
          Memory: 512
          Environment:
            - Name: JENKINS_ADMIN_ID
              Value: 'admin'
            - Name: JENKINS_ADMIN_PASSWORD
              value: !Ref JenkinsAdminPassword
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      ServiceName: "app"
      LaunchType: FARGATE
      Cluster:
        Ref: "Cluster"
      DesiredCount: 0
      TaskDefinition:
        Ref: "TaskDefinition"
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ECSServiceSG.GroupId
          Subnets: [!Ref PrivateSubnetA,!Ref PrivateSubnetB,!Ref PrivateSubnetC]
      LoadBalancers:
        - TargetGroupArn:
            Ref: TargetGroup
          ContainerPort: 8000
          ContainerName: app
  JenkinsECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - Listener
    Properties:
      ServiceName: !Join ['', [!Ref "AWS::StackName", "-jenkins" ]]
      LaunchType: FARGATE
      Cluster:
        Ref: "Cluster"
      DesiredCount: 0
      TaskDefinition:
        Ref: "JenkinsTaskDefinition"
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !GetAtt ECSServiceSG.GroupId
          Subnets: [!Ref PrivateSubnetA,!Ref PrivateSubnetB,!Ref PrivateSubnetC]
      LoadBalancers:
        - TargetGroupArn:
            Ref: JenkinsTargetGroup
          ContainerPort: 8080
          ContainerName: app
  # ALB, Listeners and target groups
  Alb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    DependsOn:
      - NATGateway
    Properties:
      Name: !Join ['', [!Ref "AWS::StackName", "-alb" ]]
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
        - !Ref PublicSubnetC
      Type: application
      SecurityGroups:
        - !GetAtt ALBSG.GroupId
  TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Join ['', [!Ref "AWS::StackName", "app-tg" ]]
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 8000
      HealthCheckPath: /
      TargetType: ip
  JenkinsTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Join ['', [!Ref "AWS::StackName", "jenkins-tg" ]]
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 8080
      HealthCheckPath: /
      TargetType: ip
  Listener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - Alb
      - TargetGroup
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref Alb
      Port: 80
      Protocol: HTTP
  JenkinsListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn:
      - Alb
      - JenkinsTargetGroup
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref JenkinsTargetGroup
          Type: forward
      LoadBalancerArn: !Ref Alb
      Port: 8080
      Protocol: HTTP
  ALBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for the ALB
      GroupName: !Join ['', [!Ref "AWS::StackName", "-alb-security-group" ]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIpv6: ::/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'
        - CidrIpv6: ::/0
          FromPort: 8080
          ToPort: 8080
          IpProtocol: TCP
          Description: 'Inbound rule for IPv6 traffic'
        - CidrIp: 0.0.0.0/0
          FromPort: 8080
          ToPort: 8080
          IpProtocol: TCP
          Description: 'Inbound rule for IPv4 traffic'
  ECSServiceSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SG for traffic between ALB and containers
      GroupName: !Join ['', [!Ref "AWS::StackName", "-ecs-service-sg" ]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !GetAtt ALBSG.GroupId
          Description: 'Inbound rule for all traffic'
  # RDS
  RDSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
        GroupDescription: "Database instances security group"
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - 
            IpProtocol: TCP
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !GetAtt ECSServiceSG.GroupId
            Description: 'Inbound rule for ECSTCP'
        SecurityGroupEgress: 
          - 
            CidrIp: "0.0.0.0/0"
            IpProtocol: "-1"
  RDSDBSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
        DBSubnetGroupDescription: "Subnet Group for mySQL database"
        DBSubnetGroupName: !Join ['', [!Ref "AWS::StackName", "-database-subnet-group" ]]
        SubnetIds: 
          - !Ref PrivateSubnetA
          - !Ref PrivateSubnetB
          - !Ref PrivateSubnetC
  RDSDBParameterGroup:
    Type: 'AWS::RDS::DBParameterGroup'
    Properties:
      Description: CloudFormation Sample MySQL Parameter Group
      Family: postgres12
  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Ref "AWS::StackName"
      AllocatedStorage: 20
      DBInstanceClass: db.t3.small
      Engine: "postgres"
      DBName: "postgres"
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      BackupRetentionPeriod: 7
      MultiAZ: false
      EngineVersion: 12.6
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: false
      DeletionProtection: true
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      DBParameterGroupName: !Ref RDSDBParameterGroup
  # SSM parameters for the app
  DBHostParamater:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: RDS DB Host
      Name: POSTGRES_HOST
      Type: String
      Value: !GetAtt RDSDBInstance.Endpoint.Address
  DBUsernameParamater:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: RDS DB username
      Name: POSTGRES_USER
      Type: String
      Value: !Ref MasterUsername
  DBPasswordParamater:
    Type: AWS::SSM::Parameter
    Properties: 
      Description: RDS DB password
      Name: POSTGRES_PASSWORD
      Type: String
      Value: !Ref MasterUserPassword
